local M = {}

local c = require('github_dark_plus.palette')

M.setup = function()
    return {
        -- Editor highlights
        ColorColumn                          = { bg = c.bg_lighter },
        Cursor                               = { fg = c.bg, bg = c.blue },
        CursorColumn                         = { bg = c.cursor_line },
        CursorLine                           = { bg = c.cursor_line },
        CursorLineNr                         = { fg = c.fg },
        Directory                            = { fg = c.blue },
        ErrorMsg                             = { fg = c.error },
        FloatBorder                          = { fg = c.border, bg = c.bg_lighter },
        FoldColumn                           = { fg = c.fg_dim, bg = c.bg },
        Folded                               = { fg = c.fg_dim, bg = c.bg_lighter },
        IncSearch                            = { fg = c.bg, bg = c.search },
        LineNr                               = { fg = c.fg_dim },
        MatchParen                           = { fg = c.cyan, bg = c.visual, bold = true },
        ModeMsg                              = { fg = c.fg },
        MoreMsg                              = { fg = c.blue },
        NonText                              = { fg = c.fg_dim },
        Normal                               = { fg = c.fg, bg = c.bg },
        NormalFloat                          = { fg = c.fg, bg = c.bg_lighter },
        Pmenu                                = { fg = c.fg, bg = c.bg_lighter },
        PmenuSbar                            = { bg = c.bg_lighter },
        PmenuSel                             = { bg = c.selection },
        PmenuThumb                           = { bg = c.fg_dim },
        Question                             = { fg = c.blue },
        Search                               = { bg = c.search },
        SignColumn                           = { bg = c.bg },
        SpecialKey                           = { fg = c.fg_dim },
        StatusLine                           = { fg = c.fg, bg = c.bg_lighter },
        StatusLineNC                         = { fg = c.fg_dim, bg = c.bg_lighter },
        TabLine                              = { fg = c.fg_dim, bg = c.bg_lighter },
        TabLineFill                          = { bg = c.bg_darker },
        TabLineSel                           = { fg = c.fg, bg = c.bg },
        Title                                = { fg = c.blue, bold = true },
        VertSplit                            = { fg = c.border },
        Visual                               = { bg = c.visual },
        WarningMsg                           = { fg = c.warning },
        Whitespace                           = { fg = c.fg_dim },
        WinSeparator                         = { fg = c.border },

        -- Syntax highlighting
        Boolean                              = { fg = c.cyan },
        Character                            = { fg = c.red },
        Comment                              = { fg = c.comment, italic = true },
        Conditional                          = { fg = c.red },
        Constant                             = { fg = c.cyan },
        Debug                                = { fg = c.red },
        Define                               = { fg = c.red },
        Delimiter                            = { fg = c.fg },
        Error                                = { fg = c.error },
        Exception                            = { fg = c.red },
        Float                                = { fg = c.cyan },
        Function                             = { fg = c.purple_light },
        Identifier                           = { fg = c.fg },
        Ignore                               = { fg = c.fg_dim },
        Include                              = { fg = c.red },
        Keyword                              = { fg = c.red },
        Label                                = { fg = c.red },
        Macro                                = { fg = c.red },
        Number                               = { fg = c.cyan },
        Operator                             = { fg = c.operator },
        PreCondit                            = { fg = c.red },
        PreProc                              = { fg = c.red },
        Repeat                               = { fg = c.red },
        Special                              = { fg = c.purple },
        SpecialChar                          = { fg = c.red_dark },
        SpecialComment                       = { link = 'Comment' },
        Statement                            = { fg = c.red },
        StorageClass                         = { fg = c.red },
        String                               = { fg = c.string },
        Structure                            = { fg = c.orange },
        Tag                                  = { fg = c.green },
        Todo                                 = { fg = c.purple, bold = true },
        Type                                 = { fg = c.orange },
        Typedef                              = { link = 'Type' },
        Underlined                           = { fg = c.blue, underline = true },

        -- Treesitter highlights
        ['@text.literal']                    = { fg = c.cyan },
        ['@text.reference']                  = { fg = c.blue },
        ['@text.title']                      = { fg = c.blue, bold = true },
        ['@text.uri']                        = { fg = c.blue, underline = true },
        ['@text.underline']                  = { underline = true },
        ['@text.todo']                       = { fg = c.purple, bold = true },
        ['@comment']                         = { fg = c.comment, italic = true },
        ['@punctuation']                     = { fg = c.fg },
        ['@punctuation.special']             = { fg = c.red_dark },
        ['@constant']                        = { fg = c.cyan },
        ['@constant.builtin']                = { fg = c.cyan },
        ['@constant.macro']                  = { fg = c.cyan },
        ['@define']                          = { fg = c.red },
        ['@macro']                           = { fg = c.red },
        ['@string']                          = { link = 'String' },
        ['@string.escape']                   = { fg = c.orange },
        ['@string.special']                  = { fg = c.orange },
        ['@character']                       = { link = 'Character' },
        ['@character.special']               = { fg = c.orange },
        ['@number']                          = { link = 'Number' },
        ['@boolean']                         = { link = 'Boolean' },
        ['@float']                           = { link = 'Float' },
        ['@function']                        = { fg = c.purple_light },
        ['@function.builtin']                = { fg = c.purple_light },
        ['@function.macro']                  = { fg = c.purple_light },
        ['@parameter']                       = { fg = c.fg },
        ['@method']                          = { fg = c.purple_light },
        ['@field']                           = { fg = c.fg },
        ['@property']                        = { fg = c.cyan },
        ['@constructor']                     = { fg = c.orange },
        ['@conditional']                     = { fg = c.red },
        ['@repeat']                          = { fg = c.red },
        ['@label']                           = { fg = c.red },
        ['@operator']                        = { link = 'Operator' },
        ['@keyword']                         = { fg = c.red },
        ['@module.go']                       = { fg = c.fg },
        ['@exception']                       = { fg = c.red },
        ['@variable']                        = { fg = c.fg },
        ['@variable.builtin']                = { fg = c.red },
        ['@variable.member']                 = { fg = c.cyan },
        ['@type']                            = { link = 'Type' },
        ['@type.definition']                 = { link = 'Typedef' },
        ['@type.builtin']                    = { link = 'Type' },
        ['@storageclass']                    = { fg = c.red },
        ['@namespace']                       = { fg = c.fg },
        ['@include']                         = { fg = c.red },
        ['@preproc']                         = { fg = c.red },
        ['@debug']                           = { fg = c.red },
        ['@tag']                             = { fg = c.green },
        ['@tag.attribute']                   = { fg = c.fg },
        ['@tag.delimiter']                   = { fg = c.fg },

        -- LSP highlights
        DiagnosticError                      = { fg = c.error },
        DiagnosticWarn                       = { fg = c.warning },
        DiagnosticInfo                       = { fg = c.info },
        DiagnosticHint                       = { fg = c.hint },
        DiagnosticUnderlineError             = { sp = c.error, undercurl = true },
        DiagnosticUnderlineWarn              = { sp = c.warning, undercurl = true },
        DiagnosticUnderlineInfo              = { sp = c.info, undercurl = true },
        DiagnosticUnderlineHint              = { sp = c.hint, undercurl = true },
        LspReferenceText                     = { bg = c.selection },
        LspReferenceRead                     = { bg = c.selection },
        LspReferenceWrite                    = { bg = c.selection },
        LspSignatureActiveParameter          = { fg = c.orange, bold = true },

        -- Git signs
        GitSignsAdd                          = { fg = c.git_add },
        GitSignsChange                       = { fg = c.git_change },
        GitSignsDelete                       = { fg = c.git_delete },

        -- Diff
        DiffviewAdd                          = { bg = c.diff_add, bold = true },
        DiffviewChange                       = { bg = c.diff_change, bold = true },
        DiffviewDelete                       = { bg = c.diff_delete, bold = true },
        DiffviewText                         = { bg = c.diff_text, bold = true },
        DiffAdd                              = { fg = c.git_add, bg = c.diff_add, bold = true },
        DiffChange                           = { bg = c.diff_change },
        DiffDelete                           = { fg = c.git_delete, bg = c.diff_delete },
        DiffText                             = { bg = c.diff_text },

        -- Telescope
        TelescopeBorder                      = { fg = c.border },
        TelescopePromptBorder                = { fg = c.border },
        TelescopeResultsBorder               = { fg = c.border },
        TelescopePreviewBorder               = { fg = c.border },
        TelescopeSelection                   = { bg = c.selection },
        TelescopeMultiSelection              = { bg = c.selection },

        -- NvimTree
        NvimTreeNormal                       = { fg = c.fg, bg = c.bg_darker },
        NvimTreeFolderName                   = { fg = c.blue },
        NvimTreeFolderIcon                   = { fg = c.blue },
        NvimTreeOpenedFolderName             = { fg = c.blue },
        NvimTreeRootFolder                   = { fg = c.purple, bold = true },
        NvimTreeGitDirty                     = { fg = c.git_change },
        NvimTreeGitNew                       = { fg = c.git_add },
        NvimTreeGitDeleted                   = { fg = c.git_delete },

        -- Which-key
        WhichKey                             = { fg = c.purple },
        WhichKeyGroup                        = { fg = c.blue },
        WhichKeyDesc                         = { fg = c.fg },
        WhichKeySeparator                    = { fg = c.comment },
        WhichKeyFloat                        = { bg = c.bg_lighter },

        -- Indent-blankline
        IndentBlanklineChar                  = { fg = c.border },
        IndentBlanklineContextChar           = { fg = c.fg_dim },

        -- Dashboard
        DashboardHeader                      = { fg = c.purple },
        DashboardCenter                      = { fg = c.blue },
        DashboardShortCut                    = { fg = c.cyan },
        DashboardFooter                      = { fg = c.comment },

        -- Notify
        NotifyERRORBorder                    = { fg = c.error },
        NotifyWARNBorder                     = { fg = c.warning },
        NotifyINFOBorder                     = { fg = c.info },
        NotifyDEBUGBorder                    = { fg = c.hint },
        NotifyTRACEBorder                    = { fg = c.purple },
        NotifyERRORIcon                      = { fg = c.error },
        NotifyWARNIcon                       = { fg = c.warning },
        NotifyINFOIcon                       = { fg = c.info },
        NotifyDEBUGIcon                      = { fg = c.hint },
        NotifyTRACEIcon                      = { fg = c.purple },
        NotifyERRORTitle                     = { fg = c.error },
        NotifyWARNTitle                      = { fg = c.warning },
        NotifyINFOTitle                      = { fg = c.info },
        NotifyDEBUGTitle                     = { fg = c.hint },
        NotifyTRACETitle                     = { fg = c.purple },

        -- Neo-tree
        NeoTreeNormal                        = { fg = c.fg, bg = c.bg_darker },
        NeoTreeNormalNC                      = { fg = c.fg, bg = c.bg_darker },
        NeoTreeDirectoryName                 = { fg = c.blue },
        NeoTreeDirectoryIcon                 = { fg = c.blue },
        NeoTreeRootName                      = { fg = c.purple, bold = true },
        NeoTreeGitAdded                      = { fg = c.git_add },
        NeoTreeGitModified                   = { fg = c.git_change },
        NeoTreeGitDeleted                    = { fg = c.git_delete },

        -- Cmp (completion menu)
        CmpItemAbbrMatch                     = { fg = c.blue },
        CmpItemAbbrMatchFuzzy                = { fg = c.blue },
        CmpItemKindVariable                  = { fg = c.fg },
        CmpItemKindInterface                 = { fg = c.orange },
        CmpItemKindText                      = { fg = c.fg },
        CmpItemKindFunction                  = { fg = c.purple },
        CmpItemKindMethod                    = { fg = c.purple },
        CmpItemKindKeyword                   = { fg = c.red },
        CmpItemKindProperty                  = { fg = c.fg },
        CmpItemKindUnit                      = { fg = c.blue },

        -- Bufferline
        BufferLineFill                       = { bg = c.bg_darker },
        BufferLineBackground                 = { fg = c.fg_dim, bg = c.bg_darker },
        BufferLineBuffer                     = { fg = c.fg_dim, bg = c.bg_darker },
        BufferLineBufferSelected             = { fg = c.fg, bg = c.bg, bold = true },
        BufferLineBufferVisible              = { fg = c.fg, bg = c.bg_lighter },
        BufferLineTab                        = { fg = c.fg_dim, bg = c.bg_darker },
        BufferLineTabSelected                = { fg = c.fg, bg = c.bg },
        BufferLineTabClose                   = { fg = c.red, bg = c.bg_darker },

        -- Leap
        LeapMatch                            = { fg = c.bg, bg = c.purple, bold = true },
        LeapLabelPrimary                     = { fg = c.bg, bg = c.pink, bold = true },
        LeapLabelSecondary                   = { fg = c.bg, bg = c.cyan, bold = true },
        LeapBackdrop                         = { fg = c.comment },

        -- Blink.cmp
        BlinkCmpMenu                         = { fg = c.fg, bg = c.bg_lighter },
        BlinkCmpMenuBorder                   = { fg = c.border, bg = c.bg_lighter },
        BlinkCmpMenuSelection                = { link = 'PmenuSel' },
        BlinkCmpScrollBarThumb               = { bg = c.fg_dim },
        BlinkCmpScrollBarGutter              = { bg = c.bg_lighter },
        BlinkCmpLabel                        = { fg = c.fg },
        BlinkCmpLabelMatch                   = { fg = c.purple, bold = true },
        BlinkCmpLabelDeprecated              = { fg = c.fg_dim, strikethrough = true },
        BlinkCmpLabelDetail                  = { fg = c.fg_dim },
        BlinkCmpLabelDescription             = { fg = c.fg_dim },
        BlinkCmpKind                         = { fg = c.purple },
        BlinkCmpKindClass                    = { fg = c.orange },
        BlinkCmpKindColor                    = { fg = c.cyan },
        BlinkCmpKindConstant                 = { fg = c.blue },
        BlinkCmpKindConstructor              = { fg = c.orange },
        BlinkCmpKindEnum                     = { fg = c.orange },
        BlinkCmpKindEnumMember               = { fg = c.blue },
        BlinkCmpKindEvent                    = { fg = c.purple },
        BlinkCmpKindField                    = { fg = c.fg },
        BlinkCmpKindFile                     = { fg = c.blue },
        BlinkCmpKindFolder                   = { fg = c.blue },
        BlinkCmpKindFunction                 = { fg = c.purple },
        BlinkCmpKindInterface                = { fg = c.orange },
        BlinkCmpKindKeyword                  = { fg = c.red },
        BlinkCmpKindMethod                   = { fg = c.purple },
        BlinkCmpKindModule                   = { fg = c.fg },
        BlinkCmpKindOperator                 = { fg = c.fg },
        BlinkCmpKindProperty                 = { fg = c.fg },
        BlinkCmpKindReference                = { fg = c.blue },
        BlinkCmpKindSnippet                  = { fg = c.cyan },
        BlinkCmpKindStruct                   = { fg = c.orange },
        BlinkCmpKindText                     = { fg = c.fg },
        BlinkCmpKindTypeParameter            = { fg = c.orange },
        BlinkCmpKindUnit                     = { fg = c.blue },
        BlinkCmpKindValue                    = { fg = c.blue },
        BlinkCmpKindVariable                 = { fg = c.fg },
        BlinkCmpDoc                          = { fg = c.fg, bg = c.bg_lighter },
        BlinkCmpDocBorder                    = { fg = c.border, bg = c.bg_lighter },
        BlinkCmpDocCursorLine                = { bg = c.cursor_line },
        BlinkCmpSignatureHelp                = { fg = c.fg, bg = c.bg_lighter },
        BlinkCmpSignatureHelpBorder          = { fg = c.border, bg = c.bg_lighter },
        BlinkCmpSignatureHelpActiveParameter = { fg = c.orange, bold = true },

        -- Snacks nvim
        SnacksPicker                         = { link = 'Normal' },
        SnacksPickerBorder                   = { fg = c.border },
        SnacksPickerDir                      = { fg = c.none, bg = c.none, nocombine = true },
        SnacksPickerDirectory                = { fg = c.none, bg = c.none, nocombine = true },
        SnacksIndent                         = { fg = c.comment, bg = c.none, nocombine = true },
        SnacksPickerListCursorLine           = { link = 'PmenuSel' },
        SnacksPickerPreviewCursorLine        = { fg = c.none, bg = c.none, nocombine = true },

        -- Treesitter Context
        TreesitterContext                    = { bg = c.bg },
        TreesitterContextBottom              = { sp = c.visual, underline = true },
    }
end

return M
